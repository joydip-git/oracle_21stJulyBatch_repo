XML:
Extensible Markup Language
Text-based markup language
data-describing language, it does not describe how to display data (which is the job of HTML), rather than, it defines data

HTML: designing (design markup/design formatting)

XML tags: user-defined tags
purpose: define a data structrure, used to store and oragnize data

characterestics:
a. XML is extensible
b. XML carries/represents data, does not represent it
c. XML is public/open standard (developed by w3c)


Usgaes:
configuration of web applications using xml
as medium of exchange of data between two parties
easily offload and reload data into database
this XML data can be presented by any way necessary
can be easily merged with stylesheets
any type of data can be expressed in the form of XML



XML file:
	syntax rules:
		XML declaration
		references (a DTD/Schema)
		tags or elements or nodes 
		attributes
		texts

	XML declaration rules:
	 - is case sensitive, <?xml...?>, "xml" should be in lower case
	 - first statement in XML file
	 - if XML is being used as medium of data transfer between the parties over HTTP protocol, then HTTp protocol can override the value of encoding

	references declaration:
		reference to XML schema or DTD file
		should be after the XML decalartion and before root element

	elements/tags/nodes:, 
		if child element or text: <element>....</element>
	   if no child element or text (empty tag): <elementname />
		elements are case-sensitive <employee> different from <Employee>
		element name can contain alphanumeric values. 
		punctuation marks allowed: -, _, .

	nesting elements: children elements must not overlap
	<employees>
			<employee id="100">
					<name>...</name>
			<employee id="101">
					<name>...</name>
					<salary>...</salary>
			<salary>2000</salary>
			</empoyee>
			</employee>
	</employees>

	attributes:
		key-value (name-value) pair
		depicts a property of an element
		case sensitive
		attribute names are not mentioned in quotes
		same attribute can be used twice with an element

	

	XML References:
		>,<,& etc.

		6>3

		entity reference: &name; where name is predfined string of text and/or markup
		example: &lt; &gt; &amp; &copy; &apos; &quot;
		6 &gt; 3

		character reference: &#number; => where number is a number value which represents a unicode character
		&#65; => A


		A.document prologue => xml declaration + reference declaration => 
		B.elements section


	standalone attribute:
		yes or no
		yes: document does not rely on any external file (DTD)
		no: document does rely on any external file (DTD) 

		default: no
	
	xml declaration possibilities:
	<?xml version="1.0" ?>
	<?xml version="1.0" encoding="UTF-8" ?>
   <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
   <?xml version="1.0" encoding="UTF-8" standalone="no"?>


	attributes:
	<element-name attr1 attr2 ...>
	<element-name attr1="value" attr2="value" ...>

	attribute types:
	string type: can take any literal string as a value. CDATA is a string type
	tokenized type: ID, IDREF, IDREFS, ENTITY, ENTITIES, NMTOKEN, NMTOKENS
	enumerated type: 
		NotaionType: it declares that an element will be referenced to a NOTATION delared somewhere else in the XML document
		Enumeration: enumeration helps you to define a sepcific list of values that the attribute value must match to


	DTD: document type declaration
	DTDs check the vocabulary and validity of the structure of the XML documents against the grammatical rules

	a. internal DTD	

	<!DOCTYPE element 
	[
		declaration1
		declaration2
		.......
	]>

	b. external DTD
	1. SYSTEM identifier: helps/enables you to specify the location of an external DTD file containing DTD declarations. It ccontains SYSTEM and URI identifier
	<!DOCTYPE [name-of-root-element] SYSTEM "file-name".dtd>
	
	2. public identifier:
	<!DOCTYPE [name-of-root-element] PUBLIC "-//.../DTD Example//EN">

	XSD: XML Schema Definition
	DTDs check the vocabulary and validity of the structure of the XML documents against the grammatical rules

	namespaces:
	definitions of element and attribute


	XML files:
	a. Well formed: general rules of XML has been followed
	b. Valid: when the XML document stands corrected/validated against a DTD
	A well-formed document is not necessarily valid, but a valid document is an well-formed document


	DTD vs Schema:
	-------------------------
	DTD does not support namespace, which schema file does
	It only supports only the text string type of data
	It does not use object-oriented


	DTD:
	elements
	attributes
	entities
	

	element contents:
		empty
		element(s)
		mixed content
		any content

	occurrences:
		ele+: 1 or more than 1
		ele*: 0 or more times
		ele≈õ: 0 or 1 time
		|: either of the child elements (child1|child2)

	
			
		


	
	





