OOP (Object Oriented Programming)
-------------------------------------
·         Classes and Objects 
·         OOP Principles
·         Instantiation
·         Encapsulation
·         Specialization
·         Instance Variables
·         Class Variables
·         Constructors
·         Instance Methods
·         Class Methods
·         Method Overloading
Object Design and Programming
·         Abstraction
·         Inheritance
·         Polymorphism
·         Method Overriding
·         Associations
·         Delegation

Programming Language Constructs:
a. architecture
b. compilers or interpreters
c. syntax
d. language features

Source code => compiler => machine level language code (CPU dependent)/intermediate language code (CPU independent) [will be placed inside an output file with extension .exe in case of executable application or .dll/.h/.tlb in case of library application]
can contain single file/multiple files
procedural language or OOP language
built-in functionalities (part of library)
	- functionality for printing output in the console
	- functionality for accepting input from the console
	- functionality for handling files
	- functionality for concurrent programming

applications: 
- executable (Stand-alone) application => will have a main method
- library application (reusable) application => will NOT have any main method

calculation.h
#include <stdio.h>

int add(int a, int b){
    printf ("%d",(a+b));
}

ui.c
----------------------
#include <stdio.h> /using System;/imports system;
#include<calculaulation.h>

void main(){
 add(10,20);
}


void main(){
   int a = 100;
   getInformation();
}
void getInformation(){ 
  int x = 10;
//get some information about an employee 
}

problems with procedural programming:
a. local variables of a function occupies memory block when the function is getting executed. But they are erased as soon as the function is over. only main related local variables stay as long as the application is running.
b. the values of local variables are subject to mutation, which is bit problematic related to security
c. there is no proper way to group co-related data (though C language has a technique, known as structure to do that)


name, email, phone, company, skills

C++ => object oriented programming language

OOP and OOAD

local variables: the variables that you declare inside a function in any programming language, i.e. variables that are local to the function

person:
	a. height
	b. weight
	c. color_complexion

	a. talk
	b. run
	c. sleep
	d. walk
	e. listen

akshat
akshay


class Person{
   int height;
	int weight;
	string color;

   void Talk(){}
	void Run(){}
	void Sleep(){}
	.......
}

class: a blueprint to create real time objects (instances)
object: a real time entity containing data (characterestics) and methods (functionalities). In OOP language, the instance/object is created through a blueprint (class), which defines which properties/caharacterestics/attributes and functionalities, an object must have.


class = [data + methods] 
   => encapsulation (insider capsule) 
	=> abstraction (hiding data members => data abstraction and implementation abstraction => method implementation)

access specifiers: some keywords (public, private etc.) which control accessibility of class members (data or methods)

class Person{
    //data members (global to all functionalities of the class)
	//by using private keyword, I am hiding the name of data members
    private String name;
    private float height;
    private float weight;
    private String color;
    
    //constructor method:
    //a special function to assign values to the data members (store values in memory blocks)
    //name of the function should be same as that of the class
    //the function must not return anything and unlike any other function should not have any return type at all (void/int etc.)
    //this constructor function is called DURING (not before or after) object creation
    //the following is a default constructor: the job of this default constructor function is to assign default values to the data members
    //public Person(){
        //name = null;
        //height = 0.0F;
        //weight = 0.0F;
        //color = null;
    //}
    //constructor with parameters: parameterized constructor
    public Person(String personName, float personHeight, float personWeight, String personColor){
       
        name = personName;
        height = personHeight;
        weight = personWeight;
        color = personColor;
        
    }
    //functionalities
    // this method is publicly accessible, but I am hiding what code is written inside this method
	// outsiders can call this method, but will not know what code is written inside
    public void PrintInformation(){
        System.out.println(name + " " + height + " " +" " + weight + " " + color);
        //System.out.println(height);
        //System.out.println(weight);
        //System.out.println(color);
    }
}

class HelloWorld {
    static Person Create(String pname, float pheight, float pweight, String pcolor){
        Person objAddress;
        //objAddress = new Person();
        objAddress = new Person(pname,pheight,pweight,pcolor);
        return objAddress;
    }
    public static void main(String[] args) {
        System.out.println("Hello, World!\n");
        int x = 10;
        
        Person firstObjAddress = Create("Anil",5.7F,75F,"Fair");
        Person secondObjAddress = Create("Sunil",5.5F,65F,"Pale");
        
        firstObjAddress.PrintInformation();
        secondObjAddress.PrintInformation();
        
        //firstObjAddress.name="Anil";
        //firstObjAddress.height=5.7F;
        //firstObjAddress.weight=75;
        //firstObjAddress.color="Fair";
        
        //secondObjAddress.name="Sunil";
        //secondObjAddress.height=5.5F;
        //secondObjAddress.weight=65;
        //secondObjAddress.color="Pale";
    }
}




